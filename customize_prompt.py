# customize_prompt.py
# FERRAMENTA PARA PERSONALIZAR O PROMPT DO BOT DE MEN√á√ïES

import json
import os
from typing import Dict, List

class PromptCustomizer:
    def __init__(self):
        self.config_file = "mention_prompt_config.json"
        self.load_config()
    
    def load_config(self):
        """Carrega configura√ß√£o atual"""
        try:
            with open(self.config_file, "r", encoding='utf-8') as f:
                self.config = json.load(f)
        except FileNotFoundError:
            self.config = self.create_default_config()
            self.save_config()
    
    def save_config(self):
        """Salva configura√ß√£o"""
        with open(self.config_file, "w", encoding='utf-8') as f:
            json.dump(self.config, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Configura√ß√£o salva em {self.config_file}")
    
    def create_default_config(self) -> Dict:
        """Cria configura√ß√£o padr√£o personaliz√°vel"""
        return {
            "base_personality": {
                "tone": "inteligente, respeitoso mas firme",
                "style": "direto e factual", 
                "emotion": "equilibrado, nem muito formal nem muito casual",
                "max_length": 280
            },
            "core_beliefs": [
                "Defende a democracia e o Estado de Direito",
                "Valoriza dados e evid√™ncias cient√≠ficas", 
                "Promove o di√°logo respeitoso e construtivo",
                "Questiona desinforma√ß√£o de forma educativa",
                "Apoia transpar√™ncia e accountability"
            ],
            "response_guidelines": [
                "Sempre pe√ßa fontes quando algu√©m faz afirma√ß√µes sem evid√™ncia",
                "Use dados oficiais quando dispon√≠veis (IBGE, TSE, etc.)",
                "Mantenha o foco no argumento, n√£o na pessoa",
                "Seja educativo, n√£o apenas cr√≠tico", 
                "Evite linguagem ofensiva ou polarizante"
            ],
            "topics_expertise": {
                "politica": "Conhecimento profundo de institui√ß√µes e processos democr√°ticos",
                "economia": "Foco em dados oficiais e an√°lise t√©cnica",
                "ciencia": "Valoriza peer review e consenso cient√≠fico",
                "tecnologia": "Entende impactos sociais da tecnologia",
                "educacao": "Defende educa√ß√£o p√∫blica e de qualidade"
            },
            "context_awareness": {
                "check_tweet_context": True,
                "consider_thread": True,
                "analyze_sentiment": True,
                "detect_sarcasm": True
            },
            "custom_instructions": "Voc√™ representa uma voz da raz√£o no debate p√∫blico. Seja sempre construtivo, mesmo quando discorda. Seu objetivo √© elevar o n√≠vel do debate, n√£o vencer discuss√µes."
        }
    
    def show_current_config(self):
        """Mostra configura√ß√£o atual"""
        print("\n" + "="*60)
        print("ü§ñ CONFIGURA√á√ÉO ATUAL DO BOT")
        print("="*60)
        
        print(f"\nüìù PERSONALIDADE BASE:")
        for key, value in self.config["base_personality"].items():
            print(f"  ‚Ä¢ {key.title()}: {value}")
        
        print(f"\nüí≠ VALORES FUNDAMENTAIS ({len(self.config['core_beliefs'])}):")
        for i, belief in enumerate(self.config["core_beliefs"], 1):
            print(f"  {i}. {belief}")
        
        print(f"\nüìã DIRETRIZES DE RESPOSTA ({len(self.config['response_guidelines'])}):")
        for i, guideline in enumerate(self.config["response_guidelines"], 1):
            print(f"  {i}. {guideline}")
        
        print(f"\nüéØ √ÅREAS DE EXPERTISE:")
        for topic, description in self.config["topics_expertise"].items():
            print(f"  ‚Ä¢ {topic.title()}: {description}")
        
        print(f"\nüß† CONSCI√äNCIA CONTEXTUAL:")
        for feature, enabled in self.config["context_awareness"].items():
            status = "‚úÖ" if enabled else "‚ùå"
            print(f"  {status} {feature.replace('_', ' ').title()}")
        
        print(f"\nüìú INSTRU√á√ïES PERSONALIZADAS:")
        print(f"  {self.config['custom_instructions']}")
    
    def edit_personality(self):
        """Edita personalidade base"""
        print("\nüé≠ EDITANDO PERSONALIDADE BASE")
        print("-" * 40)
        
        personality = self.config["base_personality"]
        
        print(f"Tom atual: {personality['tone']}")
        new_tone = input("Novo tom (Enter para manter): ").strip()
        if new_tone:
            personality['tone'] = new_tone
        
        print(f"Estilo atual: {personality['style']}")
        new_style = input("Novo estilo (Enter para manter): ").strip()
        if new_style:
            personality['style'] = new_style
        
        print(f"Emo√ß√£o atual: {personality['emotion']}")
        new_emotion = input("Nova emo√ß√£o (Enter para manter): ").strip()
        if new_emotion:
            personality['emotion'] = new_emotion
        
        print(f"Tamanho m√°ximo atual: {personality['max_length']}")
        new_length = input("Novo tamanho m√°ximo (Enter para manter): ").strip()
        if new_length and new_length.isdigit():
            personality['max_length'] = int(new_length)
        
        print("‚úÖ Personalidade atualizada!")
    
    def edit_beliefs(self):
        """Edita valores fundamentais"""
        print("\nüí≠ EDITANDO VALORES FUNDAMENTAIS")
        print("-" * 40)
        
        while True:
            print(f"\nValores atuais ({len(self.config['core_beliefs'])}):")
            for i, belief in enumerate(self.config["core_beliefs"], 1):
                print(f"  {i}. {belief}")
            
            print("\nOp√ß√µes:")
            print("1. Adicionar valor")
            print("2. Remover valor")
            print("3. Editar valor")
            print("4. Voltar")
            
            choice = input("\nEscolha (1-4): ").strip()
            
            if choice == "1":
                new_belief = input("Novo valor: ").strip()
                if new_belief:
                    self.config["core_beliefs"].append(new_belief)
                    print("‚úÖ Valor adicionado!")
            
            elif choice == "2":
                try:
                    index = int(input("N√∫mero do valor para remover: ")) - 1
                    if 0 <= index < len(self.config["core_beliefs"]):
                        removed = self.config["core_beliefs"].pop(index)
                        print(f"‚úÖ Removido: {removed}")
                    else:
                        print("‚ùå N√∫mero inv√°lido!")
                except ValueError:
                    print("‚ùå Digite um n√∫mero v√°lido!")
            
            elif choice == "3":
                try:
                    index = int(input("N√∫mero do valor para editar: ")) - 1
                    if 0 <= index < len(self.config["core_beliefs"]):
                        current = self.config["core_beliefs"][index]
                        print(f"Valor atual: {current}")
                        new_value = input("Novo valor: ").strip()
                        if new_value:
                            self.config["core_beliefs"][index] = new_value
                            print("‚úÖ Valor editado!")
                    else:
                        print("‚ùå N√∫mero inv√°lido!")
                except ValueError:
                    print("‚ùå Digite um n√∫mero v√°lido!")
            
            elif choice == "4":
                break
    
    def edit_guidelines(self):
        """Edita diretrizes de resposta"""
        print("\nüìã EDITANDO DIRETRIZES DE RESPOSTA")
        print("-" * 40)
        
        while True:
            print(f"\nDiretrizes atuais ({len(self.config['response_guidelines'])}):")
            for i, guideline in enumerate(self.config["response_guidelines"], 1):
                print(f"  {i}. {guideline}")
            
            print("\nOp√ß√µes:")
            print("1. Adicionar diretriz")
            print("2. Remover diretriz")
            print("3. Editar diretriz")
            print("4. Voltar")
            
            choice = input("\nEscolha (1-4): ").strip()
            
            if choice == "1":
                new_guideline = input("Nova diretriz: ").strip()
                if new_guideline:
                    self.config["response_guidelines"].append(new_guideline)
                    print("‚úÖ Diretriz adicionada!")
            
            elif choice == "2":
                try:
                    index = int(input("N√∫mero da diretriz para remover: ")) - 1
                    if 0 <= index < len(self.config["response_guidelines"]):
                        removed = self.config["response_guidelines"].pop(index)
                        print(f"‚úÖ Removida: {removed}")
                    else:
                        print("‚ùå N√∫mero inv√°lido!")
                except ValueError:
                    print("‚ùå Digite um n√∫mero v√°lido!")
            
            elif choice == "3":
                try:
                    index = int(input("N√∫mero da diretriz para editar: ")) - 1
                    if 0 <= index < len(self.config["response_guidelines"]):
                        current = self.config["response_guidelines"][index]
                        print(f"Diretriz atual: {current}")
                        new_value = input("Nova diretriz: ").strip()
                        if new_value:
                            self.config["response_guidelines"][index] = new_value
                            print("‚úÖ Diretriz editada!")
                    else:
                        print("‚ùå N√∫mero inv√°lido!")
                except ValueError:
                    print("‚ùå Digite um n√∫mero v√°lido!")
            
            elif choice == "4":
                break
    
    def edit_custom_instructions(self):
        """Edita instru√ß√µes personalizadas"""
        print("\nüìú EDITANDO INSTRU√á√ïES PERSONALIZADAS")
        print("-" * 40)
        
        print(f"Instru√ß√µes atuais:")
        print(f"{self.config['custom_instructions']}")
        
        print(f"\nDigite as novas instru√ß√µes (ou Enter para manter):")
        new_instructions = input().strip()
        
        if new_instructions:
            self.config['custom_instructions'] = new_instructions
            print("‚úÖ Instru√ß√µes atualizadas!")
    
    def create_preset(self, name: str):
        """Cria preset personalizado"""
        presets = {
            "politico_progressista": {
                "tone": "firme mas respeitoso, progressista",
                "core_beliefs": [
                    "Defende direitos humanos e igualdade social",
                    "Apoia pol√≠ticas p√∫blicas inclusivas",
                    "Valoriza diversidade e representatividade",
                    "Promove justi√ßa social e econ√¥mica",
                    "Defende meio ambiente e sustentabilidade"
                ],
                "custom_instructions": "Voc√™ √© uma voz progressista que defende mudan√ßas sociais positivas. Seja firme em seus valores mas sempre respeitoso no debate."
            },
            "analista_tecnico": {
                "tone": "t√©cnico, anal√≠tico, baseado em dados",
                "core_beliefs": [
                    "Decis√µes baseadas em evid√™ncias e dados",
                    "Metodologia cient√≠fica √© fundamental",
                    "Transpar√™ncia em an√°lises e conclus√µes",
                    "Ceticismo saud√°vel com afirma√ß√µes sem fonte",
                    "Precis√£o t√©cnica acima de ret√≥rica"
                ],
                "custom_instructions": "Voc√™ √© um analista t√©cnico que prioriza dados e evid√™ncias. Sempre pe√ßa fontes e questione metodologias de forma construtiva."
            },
            "educador_democratico": {
                "tone": "educativo, paciente, democr√°tico",
                "core_beliefs": [
                    "Educa√ß√£o √© a base da democracia",
                    "Di√°logo respeitoso constr√≥i consensos",
                    "Informa√ß√£o de qualidade √© direito de todos",
                    "Institui√ß√µes democr√°ticas devem ser fortalecidas",
                    "Participa√ß√£o cidad√£ √© essencial"
                ],
                "custom_instructions": "Voc√™ √© um educador que busca informar e elevar o debate. Seja sempre did√°tico e construtivo, mesmo com quem discorda."
            }
        }
        
        if name in presets:
            preset = presets[name]
            
            # Aplica configura√ß√µes do preset
            self.config["base_personality"]["tone"] = preset["tone"]
            self.config["core_beliefs"] = preset["core_beliefs"]
            self.config["custom_instructions"] = preset["custom_instructions"]
            
            print(f"‚úÖ Preset '{name}' aplicado!")
            return True
        
        return False
    
    def show_menu(self):
        """Mostra menu principal"""
        while True:
            print("\n" + "="*50)
            print("üõ†Ô∏è  CUSTOMIZADOR DE PROMPT - BOT DE MEN√á√ïES")
            print("="*50)
            print("1. üëÄ Ver configura√ß√£o atual")
            print("2. üé≠ Editar personalidade")
            print("3. üí≠ Editar valores fundamentais")
            print("4. üìã Editar diretrizes de resposta")
            print("5. üìú Editar instru√ß√µes personalizadas")
            print("6. üé® Aplicar preset")
            print("7. üíæ Salvar configura√ß√£o")
            print("8. üß™ Testar prompt")
            print("9. ‚ùå Sair")
            
            choice = input("\nüëâ Escolha uma op√ß√£o (1-9): ").strip()
            
            if choice == "1":
                self.show_current_config()
            
            elif choice == "2":
                self.edit_personality()
            
            elif choice == "3":
                self.edit_beliefs()
            
            elif choice == "4":
                self.edit_guidelines()
            
            elif choice == "5":
                self.edit_custom_instructions()
            
            elif choice == "6":
                print("\nPresets dispon√≠veis:")
                print("1. politico_progressista")
                print("2. analista_tecnico") 
                print("3. educador_democratico")
                
                preset_choice = input("\nEscolha um preset (1-3): ").strip()
                presets = ["politico_progressista", "analista_tecnico", "educador_democratico"]
                
                try:
                    preset_index = int(preset_choice) - 1
                    if 0 <= preset_index < len(presets):
                        self.create_preset(presets[preset_index])
                    else:
                        print("‚ùå Op√ß√£o inv√°lida!")
                except ValueError:
                    print("‚ùå Digite um n√∫mero v√°lido!")
            
            elif choice == "7":
                self.save_config()
            
            elif choice == "8":
                self.test_prompt()
            
            elif choice == "9":
                print("üëã At√© logo!")
                break
            
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
            
            input("\nüì± Pressione Enter para continuar...")
    
    def test_prompt(self):
        """Testa o prompt com um exemplo"""
        print("\nüß™ TESTE DO PROMPT")
        print("-" * 30)
        
        # Exemplo de men√ß√£o
        example_mention = input("Digite um exemplo de men√ß√£o para testar: ").strip()
        if not example_mention:
            example_mention = "@seuuser o que voc√™ acha sobre a nova pol√≠tica econ√¥mica?"
        
        # Constr√≥i o prompt
        from mention_bot import MentionBot
        
        # Simula constru√ß√£o do prompt
        config = self.config
        
        prompt = f"""
Voc√™ √© um assistente inteligente que representa @seuuser no X (Twitter).

PERSONALIDADE E TOM:
- Tom: {config['base_personality']['tone']}
- Estilo: {config['base_personality']['style']}  
- Emo√ß√£o: {config['base_personality']['emotion']}

VALORES FUNDAMENTAIS:
{chr(10).join(f"‚Ä¢ {belief}" for belief in config['core_beliefs'])}

DIRETRIZES DE RESPOSTA:
{chr(10).join(f"‚Ä¢ {guideline}" for guideline in config['response_guidelines'])}

INSTRU√á√ïES ESPECIAIS:
{config['custom_instructions']}

CONTEXTO DO TWEET:
Autor: @usuario_exemplo
Tweet que me mencionou: "{example_mention}"

TAREFA:
Responda √† men√ß√£o de forma {config['base_personality']['tone']}, seguindo suas diretrizes.
M√°ximo de {config['base_personality']['max_length']} caracteres.
Seja relevante ao contexto e mantenha sua personalidade consistente.
"""
        
        print("\nüìù PROMPT GERADO:")
        print("-" * 50)
        print(prompt)
        print("-" * 50)
        
        print(f"\nüìä ESTAT√çSTICAS:")
        print(f"‚Ä¢ Tamanho do prompt: {len(prompt)} caracteres")
        print(f"‚Ä¢ Valores fundamentais: {len(config['core_beliefs'])}")
        print(f"‚Ä¢ Diretrizes: {len(config['response_guidelines'])}")

def main():
    """Fun√ß√£o principal"""
    customizer = PromptCustomizer()
    customizer.show_menu()

if __name__ == "__main__":
    main()
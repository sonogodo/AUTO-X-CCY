# diagnose.py
# SCRIPT DE DIAGN√ìSTICO PARA IDENTIFICAR PROBLEMAS DO BOT

import os
import sys
import json
import traceback
from datetime import datetime

def check_file_permissions():
    """Verifica permiss√µes de arquivos"""
    print("üîç Verificando permiss√µes de arquivos...")
    
    files_to_check = [
        'keys.py', 'bot.py', 'bot_improved.py', 
        'keyword_prompts.py', 'last_seen_ids.json'
    ]
    
    issues = []
    for filename in files_to_check:
        if os.path.exists(filename):
            if not os.access(filename, os.R_OK):
                issues.append(f"‚ùå {filename}: Sem permiss√£o de leitura")
            elif filename.endswith('.py') and not os.access(filename, os.X_OK):
                issues.append(f"‚ö†Ô∏è  {filename}: Sem permiss√£o de execu√ß√£o")
            else:
                print(f"‚úÖ {filename}: OK")
        else:
            issues.append(f"‚ùå {filename}: Arquivo n√£o encontrado")
    
    return issues

def test_imports():
    """Testa importa√ß√µes cr√≠ticas"""
    print("\nüîç Testando importa√ß√µes...")
    
    imports_to_test = [
        ('tweepy', 'tweepy'),
        ('openai', 'openai'), 
        ('requests', 'requests'),
        ('json', 'json'),
        ('time', 'time'),
        ('datetime', 'datetime')
    ]
    
    issues = []
    for module_name, import_name in imports_to_test:
        try:
            __import__(import_name)
            print(f"‚úÖ {module_name}: OK")
        except ImportError as e:
            issues.append(f"‚ùå {module_name}: {e}")
    
    return issues

def test_api_connections():
    """Testa conex√µes com APIs"""
    print("\nüîç Testando conex√µes com APIs...")
    
    issues = []
    
    # Testa importa√ß√£o das chaves
    try:
        from keys import (X_BEARER_TOKEN, OPENAI_API_KEY, XAI_API_KEY,
                         X_API_KEY, X_API_SECRET, X_ACCESS_TOKEN, X_ACCESS_TOKEN_SECRET)
        print("‚úÖ Chaves importadas com sucesso")
    except ImportError as e:
        issues.append(f"‚ùå Erro ao importar chaves: {e}")
        return issues
    
    # Testa Twitter/X
    try:
        import tweepy
        client = tweepy.Client(bearer_token=X_BEARER_TOKEN)
        me = client.get_me()
        print(f"‚úÖ Twitter/X: Conectado como @{me.data.username}")
    except Exception as e:
        issues.append(f"‚ùå Twitter/X: {e}")
    
    # Testa OpenAI
    try:
        import openai
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        models = client.models.list()
        print("‚úÖ OpenAI: Conex√£o OK")
    except Exception as e:
        issues.append(f"‚ùå OpenAI: {e}")
    
    # Testa xAI (Grok)
    try:
        import requests
        headers = {"Authorization": f"Bearer {XAI_API_KEY}"}
        response = requests.get("https://api.x.ai/v1/models", headers=headers, timeout=10)
        if response.status_code == 200:
            print("‚úÖ xAI (Grok): Conex√£o OK")
        else:
            issues.append(f"‚ö†Ô∏è  xAI: Status {response.status_code}")
    except Exception as e:
        issues.append(f"‚ùå xAI: {e}")
    
    return issues

def check_json_files():
    """Verifica integridade dos arquivos JSON"""
    print("\nüîç Verificando arquivos JSON...")
    
    json_files = [
        'last_seen_ids.json',
        'bot_stats.json', 
        'processed_tweets.json'
    ]
    
    issues = []
    for filename in json_files:
        if os.path.exists(filename):
            try:
                with open(filename, 'r') as f:
                    json.load(f)
                print(f"‚úÖ {filename}: JSON v√°lido")
            except json.JSONDecodeError as e:
                issues.append(f"‚ùå {filename}: JSON inv√°lido - {e}")
            except Exception as e:
                issues.append(f"‚ùå {filename}: Erro ao ler - {e}")
        else:
            print(f"‚ö†Ô∏è  {filename}: N√£o existe (ser√° criado automaticamente)")
    
    return issues

def check_configuration():
    """Verifica configura√ß√µes do bot"""
    print("\nüîç Verificando configura√ß√µes...")
    
    issues = []
    
    try:
        from keyword_prompts import TARGET_USER_IDS, prompts_com_aliases
        
        if not TARGET_USER_IDS:
            issues.append("‚ùå TARGET_USER_IDS est√° vazio")
        else:
            print(f"‚úÖ {len(TARGET_USER_IDS)} usu√°rios configurados")
        
        if not prompts_com_aliases:
            issues.append("‚ùå prompts_com_aliases est√° vazio")
        else:
            total_keywords = sum(len(keywords) for keywords in prompts_com_aliases.keys())
            print(f"‚úÖ {len(prompts_com_aliases)} grupos de prompts, {total_keywords} palavras-chave")
            
    except ImportError as e:
        issues.append(f"‚ùå Erro ao importar configura√ß√µes: {e}")
    
    return issues

def test_bot_functionality():
    """Testa funcionalidade b√°sica do bot"""
    print("\nüîç Testando funcionalidade do bot...")
    
    issues = []
    
    try:
        # Testa gera√ß√£o de coment√°rio
        from bot_improved import SmartXBot
        
        print("‚úÖ Bot melhorado pode ser importado")
        
        # Testa inicializa√ß√£o (sem executar)
        try:
            bot = SmartXBot()
            print("‚úÖ Bot pode ser inicializado")
        except Exception as e:
            issues.append(f"‚ùå Erro na inicializa√ß√£o do bot: {e}")
            
    except ImportError as e:
        issues.append(f"‚ùå Erro ao importar bot melhorado: {e}")
        
        # Tenta bot original
        try:
            import bot
            print("‚úÖ Bot original pode ser importado")
        except ImportError as e2:
            issues.append(f"‚ùå Erro ao importar bot original: {e2}")
    
    return issues

def generate_diagnostic_report():
    """Gera relat√≥rio completo de diagn√≥stico"""
    print("üîß DIAGN√ìSTICO COMPLETO DO BOT X.COM")
    print("=" * 50)
    
    all_issues = []
    
    # Executa todos os testes
    all_issues.extend(check_file_permissions())
    all_issues.extend(test_imports())
    all_issues.extend(test_api_connections())
    all_issues.extend(check_json_files())
    all_issues.extend(check_configuration())
    all_issues.extend(test_bot_functionality())
    
    # Relat√≥rio final
    print("\n" + "=" * 50)
    print("üìã RESUMO DO DIAGN√ìSTICO")
    print("=" * 50)
    
    if not all_issues:
        print("üéâ TUDO OK! O bot est√° pronto para funcionar.")
        print("\nüí° Para iniciar o bot, execute:")
        print("   python start_bot.py")
    else:
        print(f"‚ö†Ô∏è  {len(all_issues)} problema(s) encontrado(s):")
        print()
        for i, issue in enumerate(all_issues, 1):
            print(f"{i}. {issue}")
        
        print("\nüîß SOLU√á√ïES SUGERIDAS:")
        
        # Sugest√µes baseadas nos problemas
        if any("permiss√£o" in issue.lower() for issue in all_issues):
            print("‚Ä¢ Verifique permiss√µes dos arquivos com: chmod +x *.py")
        
        if any("importar" in issue.lower() for issue in all_issues):
            print("‚Ä¢ Instale depend√™ncias: pip install -r requirements.txt")
        
        if any("api" in issue.lower() or "conex√£o" in issue.lower() for issue in all_issues):
            print("‚Ä¢ Verifique suas chaves de API no arquivo keys.py")
            print("‚Ä¢ Teste conex√£o de internet")
        
        if any("json" in issue.lower() for issue in all_issues):
            print("‚Ä¢ Delete arquivos JSON corrompidos (ser√£o recriados)")
        
        print("\nüìû Se os problemas persistirem:")
        print("‚Ä¢ Execute: python start_bot.py ‚Üí op√ß√£o 4 (Testar configura√ß√µes)")
        print("‚Ä¢ Verifique o arquivo bot.log para mais detalhes")
    
    # Salva relat√≥rio
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"diagnostic_report_{timestamp}.txt"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(f"Relat√≥rio de Diagn√≥stico - {datetime.now()}\n")
        f.write("=" * 50 + "\n\n")
        
        if all_issues:
            f.write("PROBLEMAS ENCONTRADOS:\n")
            for i, issue in enumerate(all_issues, 1):
                f.write(f"{i}. {issue}\n")
        else:
            f.write("Nenhum problema encontrado. Bot OK!\n")
    
    print(f"\nüìÑ Relat√≥rio salvo em: {report_file}")

if __name__ == "__main__":
    try:
        generate_diagnostic_report()
    except Exception as e:
        print(f"\nüí• ERRO CR√çTICO no diagn√≥stico: {e}")
        print("\nStack trace completo:")
        traceback.print_exc()
        
        print(f"\nüÜò DIAGN√ìSTICO DE EMERG√äNCIA:")
        print(f"‚Ä¢ Python: {sys.version}")
        print(f"‚Ä¢ Diret√≥rio atual: {os.getcwd()}")
        print(f"‚Ä¢ Arquivos no diret√≥rio: {os.listdir('.')}")